// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyEShop.Data;

#nullable disable

namespace MyEShop.Migrations
{
    [DbContext(typeof(MyEshopContext))]
    [Migration("20240804153943_start")]
    partial class start
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyEShop.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CtegoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CtegoryName = "برنامه نویسی  ",
                            Description = "یرنامه نویسی وب برای همه "
                        },
                        new
                        {
                            CategoryId = 2,
                            CtegoryName = "لوازم ورزشی ",
                            Description = "لوازم ورزشی برای همه "
                        },
                        new
                        {
                            CategoryId = 3,
                            CtegoryName = " ساعت مچی ",
                            Description = " ساعت مچی برای همه"
                        });
                });

            modelBuilder.Entity("MyEShop.Models.CategoryToProduct", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("categoryToProducts");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 3,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 1,
                            ProductId = 2
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 2
                        },
                        new
                        {
                            CategoryId = 3,
                            ProductId = 2
                        },
                        new
                        {
                            CategoryId = 1,
                            ProductId = 3
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 3
                        },
                        new
                        {
                            CategoryId = 3,
                            ProductId = 3
                        });
                });

            modelBuilder.Entity("MyEShop.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.ToTable("items");

                    b.HasData(
                        new
                        {
                            ItemId = 1,
                            Price = 9823.4m,
                            QuantityInStock = 6
                        },
                        new
                        {
                            ItemId = 2,
                            Price = 933.3m,
                            QuantityInStock = 5
                        },
                        new
                        {
                            ItemId = 3,
                            Price = 332.32m,
                            QuantityInStock = 7
                        });
                });

            modelBuilder.Entity("MyEShop.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Description = "asp.netcore is do good for everyone",
                            ItemId = 1,
                            ProductName = "asp.net core"
                        },
                        new
                        {
                            ProductId = 2,
                            Description = "C# for beginners is start for runners",
                            ItemId = 2,
                            ProductName = "C# for beginners"
                        },
                        new
                        {
                            ProductId = 3,
                            Description = "C# for advanced isn't end of story",
                            ItemId = 3,
                            ProductName = "C# for advanced"
                        });
                });

            modelBuilder.Entity("MyEShop.Models.CategoryToProduct", b =>
                {
                    b.HasOne("MyEShop.Models.Category", "Category")
                        .WithMany("CategoryToProducts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEShop.Models.Product", "Product")
                        .WithMany("CategoryToProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyEShop.Models.Product", b =>
                {
                    b.HasOne("MyEShop.Models.Item", "Item")
                        .WithOne("product")
                        .HasForeignKey("MyEShop.Models.Product", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("MyEShop.Models.Category", b =>
                {
                    b.Navigation("CategoryToProducts");
                });

            modelBuilder.Entity("MyEShop.Models.Item", b =>
                {
                    b.Navigation("product")
                        .IsRequired();
                });

            modelBuilder.Entity("MyEShop.Models.Product", b =>
                {
                    b.Navigation("CategoryToProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
